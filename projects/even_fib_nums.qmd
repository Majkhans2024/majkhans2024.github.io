---
title: "Even Fibonacci Numbers"
format: html
---
### Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms would be: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


From: <https://projecteuler.net/problem=2>

My solution:
```{python}
a = 1
b = 1
total = 0
# 1, 1, 2, 3, 5, 8 ... 

for i in  range (1, 101):
    if a % 2 == 0:
        total = total + a
    if b % 2 == 0:
        total = total + b
    c = a + b
    
    if c % 2 == 0:
        total = total + c

    a = b + c
    b = c + a

    if a > 4000000 or b > 4000000 or c > 4000000:
        break

print(total)
```

Since fibbonaci numbers are just the previous 2 terms added together, and they both start at one, I created 2 variables to represent those numbers, and a third variable representing the sum of those variables. By using a for loop to iterate for a set number of times, with the conditions being that a, b and c have to be even to be added to the total, and that no number can be greater that 4 million, I managed to reach an answer. Upon reflection, the biggest issue with this is the fact that the for loop has a range that was pureley a guess. By amending it to while True, it would eliminate the guesswork on my part:

```{python}
a = 1
b = 1
total = 0
# 1, 1, 2, 3, 5, 8 ... 

while True:
    if a % 2 == 0:
        total = total + a
    if b % 2 == 0:
        total = total + b
    c = a + b
    
    if c % 2 == 0:
        total = total + c

    a = b + c
    b = c + a

    if a > 4000000 or b > 4000000 or c > 4000000:
        break

print(total)
```

04/10/2024